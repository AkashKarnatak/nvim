{
  "Competitve Programming Template": {
    "prefix": "cmp",
    "body": [
      "#ifndef _LOCAL_DEBUG",
      "#include <bits/stdc++.h>",
      "#endif",
      "#include <iostream>",
      "// #include <ext/pb_ds/assoc_container.hpp>",
      "// #include <ext/pb_ds/tree_policy.hpp>",
      "",
      "using namespace std;",
      "// using namespace __gnu_pbds;",
      "",
      "// template <typename T, typename _Compare = less<T>>",
      "// using ordered_set = tree<T, null_type, _Compare, rb_tree_tag,",
      "//                          tree_order_statistics_node_update>;",
      "// // lower_bound and upper_bound swaps values for multiset",
      "// template <typename T, typename _Compare = less_equal<T>>",
      "// using ordered_multiset = tree<T, null_type, _Compare, rb_tree_tag,",
      "//                          tree_order_statistics_node_update>;",
      "",
      "int main() {",
      "  ios_base::sync_with_stdio(false);",
      "  cin.tie(nullptr);",
      "#ifdef _LOCAL_DEBUG",
      "  freopen((string(getenv(\"HOME\")) + \"/.cvim_cache/input.txt\").c_str(), \"r\",",
      "          stdin);",
      "  freopen((string(getenv(\"HOME\")) + \"/.cvim_cache/output.txt\").c_str(), \"w\",",
      "          stdout);",
      "#endif",
      "",
      "\t$1",
      "",
      "  return 0;",
      "}"
    ],
    "description": "Standard starter template for a tiny C++ program"
  },
  "Leetcode Template": {
    "prefix": "leet",
    "body": [
      "#ifndef _LOCAL_DEBUG",
      "#include <bits/stdc++.h>",
      "#endif",
      "#include <iostream>",
      "#include <vector>",
      "// #include <ext/pb_ds/assoc_container.hpp>",
      "// #include <ext/pb_ds/tree_policy.hpp>",
      "",
      "using namespace std;",
      "// using namespace __gnu_pbds;",
      "",
      "// template <typename T, typename _Compare = less<T>>",
      "// using ordered_set = tree<T, null_type, _Compare, rb_tree_tag,",
      "//                          tree_order_statistics_node_update>;",
      "// // lower_bound and upper_bound swaps values for multiset",
      "// template <typename T, typename _Compare = less_equal<T>>",
      "// using ordered_multiset = tree<T, null_type, _Compare, rb_tree_tag,",
      "//                          tree_order_statistics_node_update>;",
      "",
      "vector<int32_t> read_vec(string s) {",
      "  s = s.substr(1, s.size() - 2);",
      "  vector<int32_t> v;",
      "  while (s.size()) {",
      "    size_t i = s.find(',');",
      "    if (i == string::npos) {",
      "      v.push_back(stoi(s));",
      "      break;",
      "    }",
      "    v.push_back(stoi(s.substr(0, i)));",
      "    s = s.substr(i + 1);",
      "  }",
      "  return v;",
      "}",
      "vector<vector<int32_t>> read_mat(string s) {",
      "  s = s.substr(1, s.size() - 2);",
      "  vector<vector<int32_t>> vv;",
      "  while (s.size()) {",
      "    size_t i = s.find(']');",
      "    vv.push_back(read_vec(s.substr(0, i + 1)));",
      "    s = s.size() >= i + 2 ? s.substr(i + 2) : \"\";",
      "  }",
      "  return vv;",
      "}",
      "",
      "class Solution {",
      "\t$1",
      "};",
      "",
      "int main() {",
      "  ios_base::sync_with_stdio(false);",
      "  cin.tie(nullptr);",
      "#ifdef _LOCAL_DEBUG",
      "  freopen((string(getenv(\"HOME\")) + \"/.cvim_cache/input.txt\").c_str(), \"r\",",
      "          stdin);",
      "  freopen((string(getenv(\"HOME\")) + \"/.cvim_cache/output.txt\").c_str(), \"w\",",
      "          stdout);",
      "#endif",
      "",
      "  int32_t q = 1;",
      "",
      "  while (q--) {",
      "    string s;",
      "    cin >> s;",
      "",
      "    Solution sol;",
      "    // cout << sol.func(v) << endl;",
      "  }",
      "",
      "  return 0;",
      "}"
    ],
    "description": "Standard starter template for a tiny C++ program"
  }
}
